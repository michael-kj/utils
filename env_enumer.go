// Code generated by "enumer -type=Env -json -text -sql"; DO NOT EDIT.

//
package utils

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _EnvName = "DevOnlineQaPlLocalUnknow"

var _EnvIndex = [...]uint8{0, 3, 9, 11, 13, 18, 24}

func (i Env) String() string {
	i -= 1
	if i < 0 || i >= Env(len(_EnvIndex)-1) {
		return fmt.Sprintf("Env(%d)", i+1)
	}
	return _EnvName[_EnvIndex[i]:_EnvIndex[i+1]]
}

var _EnvValues = []Env{1, 2, 3, 4, 5, 6}

var _EnvNameToValueMap = map[string]Env{
	_EnvName[0:3]:   1,
	_EnvName[3:9]:   2,
	_EnvName[9:11]:  3,
	_EnvName[11:13]: 4,
	_EnvName[13:18]: 5,
	_EnvName[18:24]: 6,
}

// EnvString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EnvString(s string) (Env, error) {
	if val, ok := _EnvNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Env values", s)
}

// EnvValues returns all values of the enum
func EnvValues() []Env {
	return _EnvValues
}

// IsAEnv returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Env) IsAEnv() bool {
	for _, v := range _EnvValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Env
func (i Env) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Env
func (i *Env) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Env should be a string, got %s", data)
	}

	var err error
	*i, err = EnvString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Env
func (i Env) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Env
func (i *Env) UnmarshalText(text []byte) error {
	var err error
	*i, err = EnvString(string(text))
	return err
}

func (i Env) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Env) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := EnvString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
